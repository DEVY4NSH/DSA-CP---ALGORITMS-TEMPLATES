void heapify(vector<int> &v,int n,int i){
    //assuming root  as larget as of now
    int largest = i;
    int left = 2*i+1;
    int right = 2*i+2;

    if(left<n && v[largest]<v[left]){
        largest = left;
    }
    if(right<n && v[largest]<v[right]){
        largest = right;
    }
    //if largest is not equal to root
    if(largest!=i){
        swap(v[largest],v[i]);
        heapify(v,n,largest);
    }
}

void heapsort(vector<int> &v,int n){
    for(int i=n/2-1;i>=0;--i){
        heapify(v,n,i);
    }
    for(int i=n-1;i>=0;--i){
        //step 2 of heap sort, swapping largest with leaf node
        swap(v[0],v[i]);
        heapify(v,i,0);
    }
}
